name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Set up build environment
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
        echo "GIT_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

    - name: Build binaries
      run: |
        # Create build directory
        mkdir -p build

        # Build for multiple platforms
        platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")

        for platform in "${platforms[@]}"; do
          os=${platform%/*}
          arch=${platform#*/}

          echo "Building for $os/$arch..."

          if [ "$os" = "windows" ]; then
            output="build/gemini-mcp-${VERSION}-${os}-${arch}.exe"
          else
            output="build/gemini-mcp-${VERSION}-${os}-${arch}"
          fi

          GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build \
            -ldflags "-X main.version=${VERSION} -X 'main.buildTime=${BUILD_TIME}' -X main.gitCommit=${GIT_COMMIT} -s -w" \
            -o "$output" \
            main.go

          # Create compressed archives
          if [ "$os" = "windows" ]; then
            zip "build/gemini-mcp-${VERSION}-${os}-${arch}.zip" "$output"
            rm "$output"
          else
            tar -czf "build/gemini-mcp-${VERSION}-${os}-${arch}.tar.gz" -C build "$(basename "$output")"
            rm "$output"
          fi
        done

    - name: Generate checksums
      run: |
        cd build
        sha256sum * > checksums.txt
        echo "Checksums generated:"
        cat checksums.txt

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for current version
          sed -n "/## \[${VERSION#v}\]/,/## \[/p" CHANGELOG.md | head -n -1 > current_changelog.txt
        else
          # Generate simple changelog from git commits
          echo "## Changes in ${VERSION}" > current_changelog.txt
          echo "" >> current_changelog.txt
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> current_changelog.txt || echo "- Initial release" >> current_changelog.txt
        fi

        echo "Generated changelog:"
        cat current_changelog.txt

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/*"
        bodyFile: "current_changelog.txt"
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        token: ${{ secrets.GITHUB_TOKEN }}
        generateReleaseNotes: true
        name: "Release ${{ env.VERSION }}"
        tag: ${{ env.VERSION }}

  docker:
    needs: release
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the entire workflow if Docker fails

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request' && secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      continue-on-error: true

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build Docker image (local only)
      if: github.event_name == 'pull_request' || secrets.DOCKERHUB_USERNAME == '' || secrets.DOCKERHUB_TOKEN == ''
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Docker image
      if: github.event_name != 'pull_request' && secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != ''
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max