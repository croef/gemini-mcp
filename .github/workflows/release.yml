name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Set up build environment
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
        echo "GIT_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: Build binaries
      run: |
        mkdir -p build

        # Build for multiple platforms
        platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")

        for platform in "${platforms[@]}"; do
          os=${platform%/*}
          arch=${platform#*/}

          echo "Building for $os/$arch..."

          if [ "$os" = "windows" ]; then
            output="build/gemini-mcp-${VERSION}-${os}-${arch}.exe"
          else
            output="build/gemini-mcp-${VERSION}-${os}-${arch}"
          fi

          GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build \
            -ldflags "-X main.version=${VERSION} -X 'main.buildTime=${BUILD_TIME}' -X main.gitCommit=${GIT_COMMIT} -s -w" \
            -o "$output" \
            main.go

          # Create compressed archives
          if [ "$os" = "windows" ]; then
            (cd build && zip "gemini-mcp-${VERSION}-${os}-${arch}.zip" "$(basename "$output")")
          else
            tar -czf "build/gemini-mcp-${VERSION}-${os}-${arch}.tar.gz" -C build "$(basename "$output")"
          fi

          # Remove uncompressed binary
          rm "$output"
        done

    - name: Generate checksums
      run: |
        cd build
        sha256sum *.tar.gz *.zip > checksums.txt
        cat checksums.txt

    - name: Generate release notes
      run: |
        if [ -f CHANGELOG.md ]; then
          sed -n "/## \[${VERSION#v}\]/,/## \[/p" CHANGELOG.md | head -n -1 > release_notes.txt
        else
          echo "## Changes in ${VERSION}" > release_notes.txt
          echo "" >> release_notes.txt
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")..HEAD >> release_notes.txt 2>/dev/null || echo "- Initial release" >> release_notes.txt
        fi

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/*.tar.gz,build/*.zip,build/checksums.txt"
        bodyFile: "release_notes.txt"
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        token: ${{ secrets.GITHUB_TOKEN }}
        generateReleaseNotes: true